import "../common/set-test-envs";
import { toHex } from "fuels";
import { deployPricesContract, readTestData } from "../common/test-utils";
import { U256Input, U256Output } from "./autogenerated/PricesAbi";
import { PricesAbi as PricesContract } from "./autogenerated";

jest.setTimeout(120000);

const U256_ETH: U256Input = { a: 0, b: 0, c: 0, d: 4543560 };
const U256_BTC: U256Input = { a: 0, b: 0, c: 0, d: 4346947 };
const U256_AVAX: U256Input = { a: 0, b: 0, c: 0, d: 1096171864 };

async function getPricesContract(): Promise<PricesContract> {
  return await deployPricesContract({
    fakeTimestamp: 1678113540 + 60,
    signerCountThreshold: 2,
    signers: [
      "0x1ea62d73edf8ac05dfcea1a34b9796e937a29eff",
      "0x12470f7aba85c8b81d63137dd5925d6ee114952b",
    ],
  });
}

describe("Prices contract", () => {
  it("read_timestamp should return the saved timestamp", async () => {
    const contract = await getPricesContract();
    const result = await contract.functions.read_timestamp().call();
    expect(result.value.toHex()).toBe(toHex(0));
  });

  it("get_prices should return the price data", async () => {
    const contract = await getPricesContract();
    const payloadData = readTestData("2sig_ETH_BTC");

    const { value } = await contract.functions
      .get_prices([U256_ETH, U256_BTC], payloadData)
      .call();

    const values = value.map((res: U256Output) => {
      return res.d.toNumber();
    });

    expect(values[0]).toBe(156962499984);
    expect(values[1]).toBe(2242266554738);
  });

  it("get_prices should panic with insufficient number of signers", async () => {
    const contract = await getPricesContract();
    const payloadData = readTestData("2sig_ETH_BTC");

    try {
      await contract.functions
        .get_prices([U256_ETH, U256_BTC, U256_AVAX], payloadData)
        .call();
    } catch (e: any) {
      expect(e).not.toBeNull();
    }
  });
});
